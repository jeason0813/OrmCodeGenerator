Imports System.Linq
Imports System.Text
Imports System.Collections.Generic
Imports System

'------------------------------------------------------------------------------
'<auto-generated>
'    Il codice è stato generato da uno strumento.
'    Versione runtime: 12.0.0.0
' 
'    Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
'    il codice viene rigenerato.
'</auto-generated>
'------------------------------------------------------------------------------
Namespace My.Templates
    '''<summary>
    '''Class to produce the template output
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")>  _
    Partial Public Class LunaDAOClassTvb
        Inherits LunaDAOClassTvbBase
        '''<summary>
        '''Create the template output
        '''</summary>
        Public Overridable Function TransformText() As String
            Me.Write("#Region ""Author"""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'*********************************"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'LUNA ORM -"&Global.Microsoft.VisualBasic.ChrW(9)&"http://www.luna"& _ 
                    "orm.org"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'*********************************"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'Code created with Luna ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\../Authorvb.tt",11)
write(My.Application.Info.Version.Major & "." & My.Application.Info.Version.Minor & "." & My.Application.Info.Version.Build & "." & My.Application.Info.Version.Revision)
            
            #End ExternalSource
            Me.Write(" "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'Author: Diego Lunadei"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'Date: ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\../Authorvb.tt",13)
write(Date.Now.ToString("dd/MM/yyyy"))
            
            #End ExternalSource
            Me.Write(" "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"#End Region"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Imports System"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Imports System.Xml"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Imports System.Xml.Serialization"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Imports S"& _ 
                    "ystem.Data"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Imports System.Data.Common"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",13)

Dim ConnectionTypeS as string =""
Dim TipoCampoData As String=""
Dim Posizione As Integer = 1
Select Case Sorgente.TipoSorgente
                Case enDatasourceType.SQLServer
					ConnectionTypeS = "SqlConnection"
                    TipoCampoData = "DateTime"
				
            
            #End ExternalSource
            Me.Write("Imports System.Data.SqlClient"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",23)
Case enDatasourceType.Oracle
				ConnectionTypeS = "OracleConnection"
                TipoCampoData = "DateTime"
				
            
            #End ExternalSource
            Me.Write("Imports System.Data.OracleClient"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",28)
Case Else
				ConnectionTypeS = "OleDBConnection"
                TipoCampoData = "Date"
                
            
            #End ExternalSource
            Me.Write("Imports System.Data.OleDb"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",33)
End Select 
            
            #End ExternalSource
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'''This class manage persistency on db of ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",36)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeClasse))
            
            #End ExternalSource
            Me.Write(" object"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' </summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' <remarks>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'''"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' </remarks>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",41)

Dim CommandTypeS as string =""
Dim DataReaderTypeS as string =""
Dim TransactionTypeS as string =""
Dim ParameterTypeS as string =""
Dim DbTypeS As String = ""
Select Case Sorgente.TipoSorgente
    Case enDatasourceType.SQLServer
		CommandTypeS = "SqlCommand"
        DataReaderTypeS = "SqlDataReader"
        TransactionTypeS = "SqlTransaction"
        ParameterTypeS = "SqlParameter"
        DbTypeS = "SqlDbType"
	Case enDatasourceType.Oracle
        CommandTypeS = "OracleCommand"
        DataReaderTypeS = "OracleDataReader"
        TransactionTypeS = "OracleTransaction"
        ParameterTypeS = "OracleParameter"
        DbTypeS = "OracleDbType"
	Case Else
        CommandTypeS = "OleDbCommand"
        DataReaderTypeS = "OleDbDataReader"
        TransactionTypeS = "OleDbTransaction"
        ParameterTypeS = "OleDbParameter"
        DbTypeS = "OleDbType"
end Select 


            
            #End ExternalSource
            Me.Write("Public MustInherit Class _")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",69)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeClasseDAO))
            
            #End ExternalSource
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Inherits LUNA.LunaBaseClassDAO(Of ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",70)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeClasse))
            
            #End ExternalSource
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'''New() create an istance of this class. Use default DB Conn"& _ 
                    "ection"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' </summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' <returns>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'''"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' </returns>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Public Sub New()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"M"& _ 
                    "yBase.New()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"End Sub"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'''New() create an istance of this class "& _ 
                    "and specify an OPENED DB connection"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' </summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' <returns>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'''"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' </r"& _ 
                    "eturns>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Public Sub New(ByVal Connection As ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",88)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(ConnectionTypeS))
            
            #End ExternalSource
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"MyBase.New(Connection)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"End Sub"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'''Read from DB table ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",93)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeTabella))
            
            #End ExternalSource
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' </summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' <returns>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'''Return a ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",96)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeClasse))
            
            #End ExternalSource
            Me.Write(" object"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' </returns>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Public Overrides Function Read(Id as integer) as ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",98)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeClasse))
            
            #End ExternalSource
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Dim cls as new ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",99)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeClasse))
            
            #End ExternalSource
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Try"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        Using myCommand As ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",102)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(CommandTypeS))
            
            #End ExternalSource
            Me.Write(" = _cn.CreateCommand"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            myCommand.CommandText = ""SELECT * FRO"& _ 
                    "M ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",104)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeTabella))
            
            #End ExternalSource
            Me.Write(" where ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",104)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.CampoChiave.NomeLogico))
            
            #End ExternalSource
            Me.Write(" = "" & Id"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            If Not LUNA.LunaContext.TransactionBox Is Nothing Then myC"& _ 
                    "ommand.Transaction = LUNA.LunaContext.TransactionBox.Transaction"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            Us"& _ 
                    "ing myReader As ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",106)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(DataReaderTypeS))
            
            #End ExternalSource
            Me.Write(" = myCommand.ExecuteReader"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                myReader.Read()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                if"& _ 
                    " myReader.HasRows then"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    cls.FillFromDataRecord(CType(myReade"& _ 
                    "r, IDataRecord))"&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                End If"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                myReader.Close()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "& _ 
                    "         End Using"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        End Using"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Catch ex As Exception"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"    ManageErr"& _ 
                    "or(ex)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Try"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Return cls"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"End Function"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'''Save on D"& _ 
                    "B table ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",122)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeTabella))
            
            #End ExternalSource
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' </summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' <returns>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'''Return ID insert in DB"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' </returns>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Publi"& _ 
                    "c Overrides Function Save(byRef cls as ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",127)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeClasse))
            
            #End ExternalSource
            Me.Write(") as Integer"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Dim Ris as integer=0 'in Ris return Insert Id"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    If cls.I"& _ 
                    "sValid Then"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        If cls.IsChanged Then"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            Using myCommand As ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",133)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(CommandTypeS))
            
            #End ExternalSource
            Me.Write(" = New ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",133)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(CommandTypeS))
            
            #End ExternalSource
            Me.Write("()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"            Try"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"            Dim sql As String = String.Empty"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"         "& _ 
                    "   myCommand.Connection = _cn"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"            If Not LUNA.LunaContext.Transaction"& _ 
                    "Box Is Nothing Then myCommand.Transaction = LUNA.LunaContext.TransactionBox.Tran"& _ 
                    "saction"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"            If cls.")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",138)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.CampoChiave.NomeLogico))
            
            #End ExternalSource
            Me.Write(" = 0 Then"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                    sql = ""INSERT INTO ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",139)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeTabella))
            
            #End ExternalSource
            Me.Write(" ("""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",140)

                    Posizione=1
                    For each Campo As cCampoDb in Tabella.Campi
                        if Campo.Contatore = False then
            
            #End ExternalSource
            Me.Write("                            sql &= "" ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",144)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Campo.Nome))
            
            #End ExternalSource
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",144)
If posizione <> Tabella.Campi.Count Then Write(",")
            
            #End ExternalSource
            Me.Write(""""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",145)

                        end if
                        Posizione +=1 
                    next
    
            
            #End ExternalSource
            Me.Write("                      sql &= "") VALUES ("""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",150)

                    Dim Identificatore As String = String.Empty 
                    Select Case Sorgente.OriginalTipoSorgente
                        Case enDatasourceType.Access, enDatasourceType.SQLServer
                            Identificatore = "@"
                        Case enDatasourceType.Oracle
                            Identificatore = ":"
                    End Select

                    Posizione = 1
                    For each Campo As cCampoDb in Tabella.Campi
                        If Campo.Contatore = false then
    
            
            #End ExternalSource
            Me.Write("                      sql &= "" ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",162)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Identificatore + Campo.Nome))
            
            #End ExternalSource
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",162)
If Posizione <> Tabella.Campi.Count Then Write(",")
            
            #End ExternalSource
            Me.Write(""""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",163)

                        end if
                        Posizione +=1
                    next
    
            
            #End ExternalSource
            Me.Write("                      sql &= "")"""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"            Else"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"            sql = ""UPDAT"& _ 
                    "E ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",169)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeTabella))
            
            #End ExternalSource
            Me.Write(" SET """&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",170)

                    Posizione = 1
                    For each Campo As cCampoDb in Tabella.Campi
                        if Campo.Contatore = False then
    
            
            #End ExternalSource
            Me.Write("                  sql &= """)
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",174)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Campo.Nome + " = " + Identificatore + Campo.Nome))
            
            #End ExternalSource
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",174)
If Posizione <> Tabella.Campi.Count Then Write(",")
            
            #End ExternalSource
            Me.Write(""""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",175)

                        end if
                        Posizione +=1
                    next
                    
            
            #End ExternalSource
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"            sql &= "" WHERE ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",180)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.CampoChiave.Nome))
            
            #End ExternalSource
            Me.Write("= "" & cls.")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",180)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.CampoChiave.NomeLogico))
            
            #End ExternalSource
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"            End if"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",183)

                    For each Campo As cCampoDb in Tabella.Campi
                        if Campo.Contatore = False then
                            If Campo.TipoStringa.ToLower = "datetime" then
    
            
            #End ExternalSource
            Me.Write("              if cls.")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",187)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Campo.NomeLogico))
            
            #End ExternalSource
            Me.Write(" <> Date.MinValue then"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                        Dim DataPar As New ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",188)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(ParameterTypeS))
            
            #End ExternalSource
            Me.Write("(""")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",188)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Identificatore + Campo.Nome))
            
            #End ExternalSource
            Me.Write(""", ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",188)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(DbTypeS))
            
            #End ExternalSource
            Me.Write(".")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",188)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(TipoCampoData))
            
            #End ExternalSource
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"            DataPar.Value = cls.")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",189)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Campo.NomeLogico))
            
            #End ExternalSource
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"            myCommand.Parameters.Add(DataPar)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    else"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "& _ 
                    "                     myCommand.Parameters.Add(New ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",192)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(ParameterTypeS))
            
            #End ExternalSource
            Me.Write("(""")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",192)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Identificatore + Campo.Nome))
            
            #End ExternalSource
            Me.Write(""", DBNull.Value))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    end if  "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",194)

                            else
                    
            
            #End ExternalSource
            Me.Write("myCommand.Parameters.Add(New ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",196)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(ParameterTypeS))
            
            #End ExternalSource
            Me.Write("(""")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",196)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Identificatore + Campo.Nome))
            
            #End ExternalSource
            Me.Write(""", cls.")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",196)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Campo.NomeLogico))
            
            #End ExternalSource
            Me.Write("))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",197)

                            end if
                        end if
                    next
                    
            
            #End ExternalSource
            Me.Write("                    myCommand.CommandType = CommandType.Text"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"            myCom"& _ 
                    "mand.CommandText = sql"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"            myCommand.ExecuteNonQuery()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"           "& _ 
                    "         ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",206)

                    if Tabella.CampoChiave.Contatore then
    
            
            #End ExternalSource
            Me.Write("              If cls.")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",208)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.CampoChiave.NomeLogico))
            
            #End ExternalSource
            Me.Write("=0 Then"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"            Dim IdInserito as integer = 0"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"            Sql = ""sele"& _ 
                    "ct @@identity"""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"            myCommand.CommandText = Sql"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"            Idins"& _ 
                    "erito = myCommand.ExecuteScalar()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"            cls.")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",213)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.CampoChiave.NomeLogico))
            
            #End ExternalSource
            Me.Write(" = Idinserito"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"            Ris = Idinserito"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"            else"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"          "& _ 
                    "  Ris  =  cls.")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",216)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.CampoChiave.NomeLogico))
            
            #End ExternalSource
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"            End If"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",218)
else
            
            #End ExternalSource
            Me.Write("                    Ris  =  cls.")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",219)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.CampoChiave.NomeLogico))
            
            #End ExternalSource
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",220)
end if
            
            #End ExternalSource
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"            "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"            Catch ex As Exception"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"            ManageError(e"& _ 
                    "x)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"            End Try"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            End Using"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        else"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"        Ris  =  "& _ 
                    "cls.")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",228)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.CampoChiave.NomeLogico))
            
            #End ExternalSource
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        End If"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Else"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"    throw new ApplicationException(""Object data is"& _ 
                    " not valid"")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End If"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Return Ris"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"End Function"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Private Sub DestroyPer"& _ 
                    "manently(Id as integer) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Try"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Using  myCommand As ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",240)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(CommandTypeS))
            
            #End ExternalSource
            Me.Write(" = New ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",240)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(CommandTypeS))
            
            #End ExternalSource
            Me.Write("()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        myCommand.Connection = _cn"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        '******IMPORTANT: You can use t"& _ 
                    "his commented instruction to make a logical delete ."&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        '******Replace DEL"& _ 
                    "ETED Field with your logic deleted field name."&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        'Dim Sql As String = ""UP"& _ 
                    "DATE ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",245)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeTabella))
            
            #End ExternalSource
            Me.Write(" SET DELETED=True """&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        Dim Sql As String = ""DELETE FROM ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",246)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeTabella))
            
            #End ExternalSource
            Me.Write(""""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        Sql &= "" Where ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",247)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.CampoChiave.Nome))
            
            #End ExternalSource
            Me.Write(" = "" & Id "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        myCommand.CommandText = Sql"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        If Not LUNA.LunaContex"& _ 
                    "t.TransactionBox Is Nothing Then myCommand.Transaction = LUNA.LunaContext.Transa"& _ 
                    "ctionBox.Transaction"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        myCommand.ExecuteNonQuery()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Using"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                    "    Catch ex As Exception"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"    ManageError(ex)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Try"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"End Sub"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' <su"& _ 
                    "mmary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'''Delete from DB table ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",260)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeTabella))
            
            #End ExternalSource
            Me.Write(". Accept id of object to delete."&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' </summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Public Overrides Sub Delete(Id "& _ 
                    "as integer) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",263)

    if Tabella.TipoTabella = enTableType.Table then
    
            
            #End ExternalSource
            Me.Write("    DestroyPermanently (Id)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",267)

    end if

            
            #End ExternalSource
            Me.Write("End Sub"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'''Delete from DB table ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",272)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeTabella))
            
            #End ExternalSource
            Me.Write(". Accept object to delete and optional a List to remove the object from."&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' </s"& _ 
                    "ummary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Public Overrides Sub Delete(byref obj as ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",274)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeClasse))
            
            #End ExternalSource
            Me.Write(", Optional ByRef ListaObj as List (of ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",274)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeClasse))
            
            #End ExternalSource
            Me.Write(") = Nothing)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",275)

    if Tabella.TipoTabella = enTableType.Table then
    
            
            #End ExternalSource
            Me.Write("    DestroyPermanently (obj.")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",278)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.CampoChiave.NomeLogico))
            
            #End ExternalSource
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    If Not ListaObj Is Nothing Then ListaObj.Remove(obj)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",280)

    end if
    
            
            #End ExternalSource
            Me.Write(" "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"End Sub"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'''Find on DB table ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",286)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeTabella))
            
            #End ExternalSource
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' </summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' <returns>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'''Return first of ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",289)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeClasse))
            
            #End ExternalSource
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' </returns>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Public Overrides Function Find(ByVal ParamArray Parameter() As "& _ 
                    "LUNA.LunaSearchParameter) As ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",291)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeClasse))
            
            #End ExternalSource
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Dim ris As ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",292)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeClasse))
            
            #End ExternalSource
            Me.Write(" = Nothing"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Dim So As New LUNA.LunaSearchOption With {.Top = 1}"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Dim l As"& _ 
                    " IEnumerable(Of ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",294)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeClasse))
            
            #End ExternalSource
            Me.Write(") = FindReal(So, Parameter)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    If l.Count Then"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ris = l(0)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End If"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Return ris"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"End Function"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'''Find on DB table ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",302)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeTabella))
            
            #End ExternalSource
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' </summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' <returns>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'''Return first of ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",305)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeClasse))
            
            #End ExternalSource
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' </returns>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Public Overloads Function Find(ByVal OrderBy As String, ByVal P"& _ 
                    "aramArray Parameter() As LUNA.LunaSearchParameter) As ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",307)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeClasse))
            
            #End ExternalSource
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Dim ris As ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",308)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeClasse))
            
            #End ExternalSource
            Me.Write(" = Nothing"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Dim So As New LUNA.LunaSearchOption With {.Top = 1, .OrderBy = Or"& _ 
                    "derBy}"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Dim l As IEnumerable(Of ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",310)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeClasse))
            
            #End ExternalSource
            Me.Write(") = FindReal(So, Parameter)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    If l.Count Then"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ris = l(0)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End If"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Return ris"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"End Function"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'''Find on DB table ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",317)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeTabella))
            
            #End ExternalSource
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' </summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' <returns>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'''Return a list of ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",320)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeClasse))
            
            #End ExternalSource
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' </returns>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Public Overrides Function FindAll(ByVal ParamArray Parameter() "& _ 
                    "As LUNA.LunaSearchParameter) as IEnumerable(Of ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",322)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeClasse))
            
            #End ExternalSource
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Dim So As New Luna.LunaSearchOption"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Return FindReal(So, Parameter)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"E"& _ 
                    "nd Function"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'''Find on DB table ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",328)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeTabella))
            
            #End ExternalSource
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' </summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' <returns>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'''Return a list of ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",331)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeClasse))
            
            #End ExternalSource
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' </returns>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Public Overloads Function FindAll(ByVal OrderBy As String, ByVa"& _ 
                    "l ParamArray Parameter() As LUNA.LunaSearchParameter) as IEnumerable(Of ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",333)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeClasse))
            
            #End ExternalSource
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Dim So As New Luna.LunaSearchOption With {.OrderBy = OrderBy}"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Return "& _ 
                    "FindReal(So, Parameter)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"End Function"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'''Find on DB table ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",339)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeTabella))
            
            #End ExternalSource
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' </summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' <returns>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'''Return a list of ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",342)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeClasse))
            
            #End ExternalSource
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' </returns>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Public Overloads Function FindAll(byVal Top as integer, ByVal O"& _ 
                    "rderBy As String, ByVal ParamArray Parameter() As LUNA.LunaSearchParameter) as I"& _ 
                    "Enumerable(Of ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",344)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeClasse))
            
            #End ExternalSource
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Dim So As New Luna.LunaSearchOption With {.Top = Top, .OrderBy = OrderBy}"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Return FindReal(So, Parameter)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"End Function"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' <summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'''Find on D"& _ 
                    "B table ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",350)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeTabella))
            
            #End ExternalSource
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' </summary>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' <returns>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'''Return a list of ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",353)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeClasse))
            
            #End ExternalSource
            Me.Write(""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"''' </returns>"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Public Overloads Function FindAll(ByVal SearchOption As LUNA.Lu"& _ 
                    "naSearchOption, ByVal ParamArray Parameter() As LUNA.LunaSearchParameter) As IEn"& _ 
                    "umerable(Of ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",355)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeClasse))
            
            #End ExternalSource
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Return FindReal(SearchOption, Parameter)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"End Function"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Private Function"& _ 
                    " FindReal(ByVal SearchOption As LUNA.LunaSearchOption, ByVal ParamArray Paramete"& _ 
                    "r() As LUNA.LunaSearchParameter) as iEnumerable(Of ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",359)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeClasse))
            
            #End ExternalSource
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Dim Ls As New List(Of ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",360)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeClasse))
            
            #End ExternalSource
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Try"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Dim sql As String = """""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    sql =""SELECT ""   & IIf(SearchOption"& _ 
                    ".Top, "" TOP "" & SearchOption.Top, """") & "" * """&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    sql &="" from ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",365)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeTabella))
            
            #End ExternalSource
            Me.Write(""" "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    For Each Par As LUNA.LunaSearchParameter In Parameter"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"    If Not Par Is"& _ 
                    " Nothing Then"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"    If Sql.IndexOf(""WHERE"") = -1 Then Sql &= "" WHERE "" Else Sql"& _ 
                    " &=  "" "" & Par.LogicOperatorStr & "" """&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"        sql &= Par.FieldName & "" "" & Pa"& _ 
                    "r.SqlOperator"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                If Par.SqlOperator.IndexOf(""IN"") <> -1 Then"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    "& _ 
                    "                sql &= "" "" & ApIn(Par.Value)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                Else"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            "& _ 
                    "        sql &= "" "" & Ap(Par.Value)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                End If"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"    End if"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Nex"& _ 
                    "t"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    If SearchOption.OrderBy.Length Then Sql &= "" ORDER BY "" & SearchOption."& _ 
                    "OrderBy"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Ls = GetData(sql, SearchOption.AddEmptyItem)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Catch ex As E"& _ 
                    "xception"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"    ManageError(ex)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Try"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Return Ls"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"End Function"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Publ"& _ 
                    "ic Overrides Function GetAll(Optional OrderByField as string = """", Optional ByVa"& _ 
                    "l AddEmptyItem As Boolean = False) as iEnumerable(Of ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",388)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeClasse))
            
            #End ExternalSource
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Dim Ls As New List(Of ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",389)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeClasse))
            
            #End ExternalSource
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Try"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Dim sql As String = """""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    sql =""SELECT * from ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",393)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeTabella))
            
            #End ExternalSource
            Me.Write(""" "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    If OrderByField.Length Then"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"    Sql &= "" ORDER BY "" & OrderByField"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "& _ 
                    " End If"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Ls = GetData(Sql,AddEmptyItem)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Catch ex As Exception"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"   "& _ 
                    " ManageError(ex)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Try"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Return Ls"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"End Function"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Protected Overrida"& _ 
                    "ble Property EmptyItemDescription As String = ""Selezionare una voce"""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Protecte"& _ 
                    "d Function GetData(sql as string, Optional ByVal AddEmptyItem As Boolean = False"& _ 
                    ") as iEnumerable(Of ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",408)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeClasse))
            
            #End ExternalSource
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Dim Ls As New List(Of ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",409)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeClasse))
            
            #End ExternalSource
            Me.Write(")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Try"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        Using myCommand As ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",411)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(CommandTypeS))
            
            #End ExternalSource
            Me.Write(" = _cn.CreateCommand()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            myCommand.CommandText = sql"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            If N"& _ 
                    "ot LUNA.LunaContext.TransactionBox Is Nothing Then myCommand.Transaction = LUNA."& _ 
                    "LunaContext.TransactionBox.Transaction"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            Using myReader As ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",414)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(DataReaderTypeS))
            
            #End ExternalSource
            Me.Write(" = myCommand.ExecuteReader()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                If AddEmptyItem Then Ls.Add(New  ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",415)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeClasse))
            
            #End ExternalSource
            Me.Write("() With {")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",415)

                Posizione = 1
                For each Campo As cCampoDb in Tabella.Campi
                    Write("." + Campo.NomeLogico)
                    if Campo.NomeLogico="Descrizione" then
                        
            
            #End ExternalSource
            Me.Write(" = EmptyItemDescription")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",420)

                    else
                        Write(Campo.ValoreDefault)
                    end if
                    If Posizione <> Tabella.Campi.Count Then
                       
            
            #End ExternalSource
            Me.Write(",")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",425)

                    End If
                    Posizione +=1
                next
                
            
            #End ExternalSource
            Me.Write(" })"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                while myReader.Read"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"                Dim classe as new ")
            
            #ExternalSource("D:\lavoro\Luna\Luna\Template\ClassDAO\LunaDAOClassTvb.tt",431)
            Me.Write(Me.ToStringHelper.ToStringWithCulture(Tabella.NomeClasse))
            
            #End ExternalSource
            Me.Write("(CType(myReader, IDataRecord))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"                Ls.Add(classe)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                "& _ 
                    "end while"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                myReader.Close()"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            End Using"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        End "& _ 
                    "Using"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Catch ex As Exception"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"    ManageError(ex)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    End Try"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    Retur"& _ 
                    "n Ls"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"End Function"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"End Class"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10))
            Return Me.GenerationEnvironment.ToString
        End Function
    End Class
    #Region "Base class"
    '''<summary>
    '''Base class for this transformation
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")>  _
    Public Class LunaDAOClassTvbBase
        #Region "Fields"
        Private generationEnvironmentField As Global.System.Text.StringBuilder
        Private errorsField As Global.System.CodeDom.Compiler.CompilerErrorCollection
        Private indentLengthsField As Global.System.Collections.Generic.List(Of Integer)
        Private currentIndentField As String = ""
        Private endsWithNewline As Boolean
        Private sessionField As Global.System.Collections.Generic.IDictionary(Of String, Object)
        #End Region
        #Region "Properties"
        '''<summary>
        '''The string builder that generation-time code is using to assemble generated output
        '''</summary>
        Protected Property GenerationEnvironment() As System.Text.StringBuilder
            Get
                If (Me.generationEnvironmentField Is Nothing) Then
                    Me.generationEnvironmentField = New Global.System.Text.StringBuilder()
                End If
                Return Me.generationEnvironmentField
            End Get
            Set
                Me.generationEnvironmentField = value
            End Set
        End Property
        '''<summary>
        '''The error collection for the generation process
        '''</summary>
        Public ReadOnly Property Errors() As System.CodeDom.Compiler.CompilerErrorCollection
            Get
                If (Me.errorsField Is Nothing) Then
                    Me.errorsField = New Global.System.CodeDom.Compiler.CompilerErrorCollection()
                End If
                Return Me.errorsField
            End Get
        End Property
        '''<summary>
        '''A list of the lengths of each indent that was added with PushIndent
        '''</summary>
        Private ReadOnly Property indentLengths() As System.Collections.Generic.List(Of Integer)
            Get
                If (Me.indentLengthsField Is Nothing) Then
                    Me.indentLengthsField = New Global.System.Collections.Generic.List(Of Integer)()
                End If
                Return Me.indentLengthsField
            End Get
        End Property
        '''<summary>
        '''Gets the current indent we use when adding lines to the output
        '''</summary>
        Public ReadOnly Property CurrentIndent() As String
            Get
                Return Me.currentIndentField
            End Get
        End Property
        '''<summary>
        '''Current transformation session
        '''</summary>
        Public Overridable Property Session() As Global.System.Collections.Generic.IDictionary(Of String, Object)
            Get
                Return Me.sessionField
            End Get
            Set
                Me.sessionField = value
            End Set
        End Property
        #End Region
        #Region "Transform-time helpers"
        '''<summary>
        '''Write text directly into the generated output
        '''</summary>
        Public Overloads Sub Write(ByVal textToAppend As String)
            If String.IsNullOrEmpty(textToAppend) Then
                Return
            End If
            'If we're starting off, or if the previous text ended with a newline,
            'we have to append the current indent first.
            If ((Me.GenerationEnvironment.Length = 0)  _
                        OrElse Me.endsWithNewline) Then
                Me.GenerationEnvironment.Append(Me.currentIndentField)
                Me.endsWithNewline = false
            End If
            'Check if the current text ends with a newline
            If textToAppend.EndsWith(Global.System.Environment.NewLine, Global.System.StringComparison.CurrentCulture) Then
                Me.endsWithNewline = true
            End If
            'This is an optimization. If the current indent is "", then we don't have to do any
            'of the more complex stuff further down.
            If (Me.currentIndentField.Length = 0) Then
                Me.GenerationEnvironment.Append(textToAppend)
                Return
            End If
            'Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(Global.System.Environment.NewLine, (Global.System.Environment.NewLine + Me.currentIndentField))
            'If the text ends with a newline, then we should strip off the indent added at the very end
            'because the appropriate indent will be added when the next time Write() is called
            If Me.endsWithNewline Then
                Me.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - Me.currentIndentField.Length))
            Else
                Me.GenerationEnvironment.Append(textToAppend)
            End If
        End Sub
        '''<summary>
        '''Write text directly into the generated output
        '''</summary>
        Public Overloads Sub WriteLine(ByVal textToAppend As String)
            Me.Write(textToAppend)
            Me.GenerationEnvironment.AppendLine
            Me.endsWithNewline = true
        End Sub
        '''<summary>
        '''Write formatted text directly into the generated output
        '''</summary>
        Public Overloads Sub Write(ByVal format As String, <System.ParamArrayAttribute()> ByVal args() As Object)
            Me.Write(String.Format(Global.System.Globalization.CultureInfo.CurrentCulture, format, args))
        End Sub
        '''<summary>
        '''Write formatted text directly into the generated output
        '''</summary>
        Public Overloads Sub WriteLine(ByVal format As String, <System.ParamArrayAttribute()> ByVal args() As Object)
            Me.WriteLine(String.Format(Global.System.Globalization.CultureInfo.CurrentCulture, format, args))
        End Sub
        '''<summary>
        '''Raise an error
        '''</summary>
        Public Sub [Error](ByVal message As String)
            Dim [error] As System.CodeDom.Compiler.CompilerError = New Global.System.CodeDom.Compiler.CompilerError()
            [error].ErrorText = message
            Me.Errors.Add([error])
        End Sub
        '''<summary>
        '''Raise a warning
        '''</summary>
        Public Sub Warning(ByVal message As String)
            Dim [error] As System.CodeDom.Compiler.CompilerError = New Global.System.CodeDom.Compiler.CompilerError()
            [error].ErrorText = message
            [error].IsWarning = true
            Me.Errors.Add([error])
        End Sub
        '''<summary>
        '''Increase the indent
        '''</summary>
        Public Sub PushIndent(ByVal indent As String)
            If (indent = Nothing) Then
                Throw New Global.System.ArgumentNullException("indent")
            End If
            Me.currentIndentField = (Me.currentIndentField + indent)
            Me.indentLengths.Add(indent.Length)
        End Sub
        '''<summary>
        '''Remove the last indent that was added with PushIndent
        '''</summary>
        Public Function PopIndent() As String
            Dim returnValue As String = ""
            If (Me.indentLengths.Count > 0) Then
                Dim indentLength As Integer = Me.indentLengths((Me.indentLengths.Count - 1))
                Me.indentLengths.RemoveAt((Me.indentLengths.Count - 1))
                If (indentLength > 0) Then
                    returnValue = Me.currentIndentField.Substring((Me.currentIndentField.Length - indentLength))
                    Me.currentIndentField = Me.currentIndentField.Remove((Me.currentIndentField.Length - indentLength))
                End If
            End If
            Return returnValue
        End Function
        '''<summary>
        '''Remove any indentation
        '''</summary>
        Public Sub ClearIndent()
            Me.indentLengths.Clear
            Me.currentIndentField = ""
        End Sub
        #End Region
        #Region "ToString Helpers"
        '''<summary>
        '''Utility class to produce culture-oriented representation of an object as a string.
        '''</summary>
        Public Class ToStringInstanceHelper
            Private formatProviderField  As System.IFormatProvider = Global.System.Globalization.CultureInfo.InvariantCulture
            '''<summary>
            '''Gets or sets format provider to be used by ToStringWithCulture method.
            '''</summary>
            Public Property FormatProvider() As System.IFormatProvider
                Get
                    Return Me.formatProviderField 
                End Get
                Set
                    If (Not (value) Is Nothing) Then
                        Me.formatProviderField  = value
                    End If
                End Set
            End Property
            '''<summary>
            '''This is called from the compile/run appdomain to convert objects within an expression block to a string
            '''</summary>
            Public Function ToStringWithCulture(ByVal objectToConvert As Object) As String
                If (objectToConvert Is Nothing) Then
                    Throw New Global.System.ArgumentNullException("objectToConvert")
                End If
                Dim t As System.Type = objectToConvert.GetType
                Dim method As System.Reflection.MethodInfo = t.GetMethod("ToString", New System.Type() {GetType(System.IFormatProvider)})
                If (method Is Nothing) Then
                    Return objectToConvert.ToString
                Else
                    Return CType(method.Invoke(objectToConvert, New Object() {Me.formatProviderField }),String)
                End If
            End Function
        End Class
        Private toStringHelperField As ToStringInstanceHelper = New ToStringInstanceHelper()
        '''<summary>
        '''Helper to produce culture-oriented representation of an object as a string
        '''</summary>
        Public ReadOnly Property ToStringHelper() As ToStringInstanceHelper
            Get
                Return Me.toStringHelperField
            End Get
        End Property
        #End Region
    End Class
    #End Region
End Namespace
