<#@ template debug="false" hostspecific="false" language="VB"  #>
<#@ assembly name="System.Core"  #>
<#@ import namespace="System.Linq"  #>
<#@ import namespace="System.Text"  #>
<#@ import namespace="System.Collections.Generic"  #>
<#@ output extension=".vb"  #>
<#@ include file="../Authorvb.tt"  #>
Imports System
Imports System.Xml
Imports System.Xml.Serialization
Imports System.Data
<#
Dim ConnectionTypeS as string =""
Select Case Sorgente.TipoSorgente
                Case enDatasourceType.SQLServer
					ConnectionTypeS = "SqlConnection"
				 #>
Imports System.Data.SqlClient
                <#Case enDatasourceType.Oracle
				ConnectionTypeS = "OracleConnection"
				 #>
Imports System.Data.OracleClient
                <#Case Else
				ConnectionTypeS = "OleDBConnection" #>
Imports System.Data.OleDb
<#End Select #>

''' <summary>
'''Entity Class for table <#=Tabella.NomeTabella #>
''' </summary>
''' <remarks>
'''Write your custom method and property here
''' </remarks>

Public Class <#=Tabella.NomeClasse #>
	Inherits _<#=Tabella.NomeClasse #>
    Implements <#=Tabella.NomeInterfaccia #>

    Public Sub New()
        MyBase.New()
    End Sub

    Public Sub New(myRecord as IDataRecord)
        MyBase.New(myRecord)
    End Sub

#Region "Database Field"

<#
    For each Campo As cCampoDb in Tabella.Campi
 #>

Public Overrides Property <#=Campo.NomeLogico #>() as <#=Campo.TipoStringa #>
    Get
	    Return MyBase.<#=Campo.NomeLogico #>
    End Get
    Set (byval value as <#=Campo.TipoStringa #>)
        MyBase.<#=Campo.NomeLogico #>= value
    End Set
End property 

<#
    next
     #>

#End Region

#Region "Logic Field"


#End Region

#Region "Method"

Public Overrides Function IsValid() As Boolean Implements <#=Tabella.NomeInterfaccia #>.IsValid
	'RETURN TRUE IF THE OBJECT IS READY FOR SAVE
	'RETURN FALSE IF LOGIC CONTROL FAIL
	'INTERNALISVALID FUNCTION MADE SIMPLE DB CONTROL
	Dim Ris As Boolean = InternalIsValid
	'PUT YOUR LOGIC VALIDATION CODE HERE
	Return Ris
End Function

Public Overrides Function Read(Id As Integer) As Integer Implements <#=Tabella.NomeInterfaccia #>.Read
	Dim Ris as integer = MyBase.Read(Id)
    Return Ris
End Function

Public Overrides Function Save() As Integer Implements <#=Tabella.NomeInterfaccia #>.Save
	Dim Ris as integer = MyBase.Save()
    Return Ris
End Function

Public Overrides Function ToString() As String
	Return MyBase.ToString()
End Function

#End Region

End Class

